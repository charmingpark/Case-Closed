/*
에라토스테네스의 체
에라토스테네스가 고안해 낸 소수를 찾아 내는 방법. 
체를 쳐내듯이 합성수를 하나하나 지워나가며 소수만을 골라 내는 방법

현재까지 소수를 구할 때 쓰는 방법들은 많이 나왔으나, 
유한히 주어진 구간 내에 있는 모든 소수를 찾을 수 있는 가장 빠르고도 확실한 방법은 계속해서 반복하는 방법밖에 없다.
*/

// 문제 : 이중for문으로 에라토스테네스의 체를 구현하시오.
// 입력 : num === 정수 && num >= 2
// 출력 : '2-3-5...'

function listPrimes(num) {
  let result = '2';
  // 2가 가장 작고, 어떤 수 던지 2를 가장 먼저 소수로 건져낼거니까.
  
  for(let i = 3 ; i <= num ; i += 2){
  // 3부터 끝까지, 특히 홀수들만 골라서 => 다른 수로 나눠지면 소수가 아님.
    let isPrime = true;
    
    let sqrt = parseInt(Math.sqrt(i));
    // helpFIles\img\에라토스테네스의 체.jpg
    // 즉, 루트 i이하의 수만 나눠보면 된다. 
    // 예) 45 => 1,2,3,4,5,6

    for(let j = 3 ; j <= sqrt ; j+= 2){
    // 그 중에서도 3이상에 루트 i 이하의 수 중, 홀수 만. 을 비교했을 때
      if(i % j === 0){
      //그 수를 다른 수로 나뉘면 소수 아님.
        isPrime = false;
        break;
        // 그 후는 계산 안하고 빠져 나와야 함.
      }
    }

    if(isPrime){
      result = `${result}-${i}`
    }
  }
  console.log (result);
}


listPrimes(45)